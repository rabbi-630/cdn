if (data.view.isHomepage == 'true') {
  loadJS('owl.carousel')
}
$(document).ready(function() {
    var media = $(window).width()
if (media >= 880) {
/*! Theia Sticky Sidebar | v1.7.0 - https://github.com/WeCodePixels/theia-sticky-sidebar */
(function($){$.fn.theiaStickySidebar=function(options){var defaults={'containerSelector':'','additionalMarginTop':0,'additionalMarginBottom':0,'updateSidebarHeight':true,'minWidth':0,'disableOnResponsiveLayouts':true,'sidebarBehavior':'modern','defaultPosition':'relative','namespace':'TSS'};options=$.extend(defaults,options);options.additionalMarginTop=parseInt(options.additionalMarginTop)||0;options.additionalMarginBottom=parseInt(options.additionalMarginBottom)||0;tryInitOrHookIntoEvents(options,this);function tryInitOrHookIntoEvents(options,$that){var success=tryInit(options,$that);if(!success){console.log('TSS: Body width smaller than options.minWidth. Init is delayed.');$(document).on('scroll.'+options.namespace,function(options,$that){return function(evt){var success=tryInit(options,$that);if(success){$(this).unbind(evt)}}}(options,$that));$(window).on('resize.'+options.namespace,function(options,$that){return function(evt){var success=tryInit(options,$that);if(success){$(this).unbind(evt)}}}(options,$that))}}function tryInit(options,$that){if(options.initialized===true){return true}if($('body').width()<options.minWidth){return false}init(options,$that);return true}function init(options,$that){options.initialized=true;var existingStylesheet=$('#theia-sticky-sidebar-stylesheet-'+options.namespace);if(existingStylesheet.length===0){$('head').append($('<style id="theia-sticky-sidebar-stylesheet-'+options.namespace+'">.theiaStickySidebar:after {content: ""; display: table; clear: both;}</style>'))}$that.each(function(){var o={};o.sidebar=$(this);o.options=options||{};o.container=$(o.options.containerSelector);if(o.container.length==0){o.container=o.sidebar.parent()}o.sidebar.parents().css('-webkit-transform','none');o.sidebar.css({'position':o.options.defaultPosition,'overflow':'visible','-webkit-box-sizing':'border-box','-moz-box-sizing':'border-box','box-sizing':'border-box'});o.stickySidebar=o.sidebar.find('.theiaStickySidebar');if(o.stickySidebar.length==0){var javaScriptMIMETypes=/(?:text|application)\/(?:x-)?(?:javascript|ecmascript)/i;o.sidebar.find('script').filter(function(index,script){return script.type.length===0||script.type.match(javaScriptMIMETypes)}).remove();o.stickySidebar=$('<div>').addClass('theiaStickySidebar').append(o.sidebar.children());o.sidebar.append(o.stickySidebar)}o.marginBottom=parseInt(o.sidebar.css('margin-bottom'));o.paddingTop=parseInt(o.sidebar.css('padding-top'));o.paddingBottom=parseInt(o.sidebar.css('padding-bottom'));var collapsedTopHeight=o.stickySidebar.offset().top;var collapsedBottomHeight=o.stickySidebar.outerHeight();o.stickySidebar.css('padding-top',1);o.stickySidebar.css('padding-bottom',1);collapsedTopHeight-=o.stickySidebar.offset().top;collapsedBottomHeight=o.stickySidebar.outerHeight()-collapsedBottomHeight-collapsedTopHeight;if(collapsedTopHeight==0){o.stickySidebar.css('padding-top',0);o.stickySidebarPaddingTop=0}else{o.stickySidebarPaddingTop=1}if(collapsedBottomHeight==0){o.stickySidebar.css('padding-bottom',0);o.stickySidebarPaddingBottom=0}else{o.stickySidebarPaddingBottom=1}o.previousScrollTop=null;o.fixedScrollTop=0;resetSidebar();o.onScroll=function(o){if(!o.stickySidebar.is(":visible")){return}if($('body').width()<o.options.minWidth){resetSidebar();return}if(o.options.disableOnResponsiveLayouts){var sidebarWidth=o.sidebar.outerWidth(o.sidebar.css('float')=='none');if(sidebarWidth+50>o.container.width()){resetSidebar();return}}var scrollTop=$(document).scrollTop();var position='static';if(scrollTop>=o.sidebar.offset().top+(o.paddingTop-o.options.additionalMarginTop)){var offsetTop=o.paddingTop+options.additionalMarginTop;var offsetBottom=o.paddingBottom+o.marginBottom+options.additionalMarginBottom;var containerTop=o.sidebar.offset().top;var containerBottom=o.sidebar.offset().top+getClearedHeight(o.container);var windowOffsetTop=0+options.additionalMarginTop;var windowOffsetBottom;var sidebarSmallerThanWindow=(o.stickySidebar.outerHeight()+offsetTop+offsetBottom)<$(window).height();if(sidebarSmallerThanWindow){windowOffsetBottom=windowOffsetTop+o.stickySidebar.outerHeight()}else{windowOffsetBottom=$(window).height()-o.marginBottom-o.paddingBottom-options.additionalMarginBottom}var staticLimitTop=containerTop-scrollTop+o.paddingTop;var staticLimitBottom=containerBottom-scrollTop-o.paddingBottom-o.marginBottom;var top=o.stickySidebar.offset().top-scrollTop;var scrollTopDiff=o.previousScrollTop-scrollTop;if(o.stickySidebar.css('position')=='fixed'){if(o.options.sidebarBehavior=='modern'){top+=scrollTopDiff}}if(o.options.sidebarBehavior=='stick-to-top'){top=options.additionalMarginTop}if(o.options.sidebarBehavior=='stick-to-bottom'){top=windowOffsetBottom-o.stickySidebar.outerHeight()}if(scrollTopDiff>0){top=Math.min(top,windowOffsetTop)}else{top=Math.max(top,windowOffsetBottom-o.stickySidebar.outerHeight())}top=Math.max(top,staticLimitTop);top=Math.min(top,staticLimitBottom-o.stickySidebar.outerHeight());var sidebarSameHeightAsContainer=o.container.height()==o.stickySidebar.outerHeight();if(!sidebarSameHeightAsContainer&&top==windowOffsetTop){position='fixed'}else if(!sidebarSameHeightAsContainer&&top==windowOffsetBottom-o.stickySidebar.outerHeight()){position='fixed'}else if(scrollTop+top-o.sidebar.offset().top-o.paddingTop<=options.additionalMarginTop){position='static'}else{position='absolute'}}if(position=='fixed'){var scrollLeft=$(document).scrollLeft();o.stickySidebar.css({'position':'fixed','width':getWidthForObject(o.stickySidebar)+'px','transform':'translateY('+top+'px)','left':(o.sidebar.offset().left+parseInt(o.sidebar.css('padding-left'))-scrollLeft)+'px','top':'0px'})}else if(position=='absolute'){var css={};if(o.stickySidebar.css('position')!='absolute'){css.position='absolute';css.transform='translateY('+(scrollTop+top-o.sidebar.offset().top-o.stickySidebarPaddingTop-o.stickySidebarPaddingBottom)+'px)';css.top='0px'}css.width=getWidthForObject(o.stickySidebar)+'px';css.left='';o.stickySidebar.css(css)}else if(position=='static'){resetSidebar()}if(position!='static'){if(o.options.updateSidebarHeight==true){o.sidebar.css({'min-height':o.stickySidebar.outerHeight()+o.stickySidebar.offset().top-o.sidebar.offset().top+o.paddingBottom})}}o.previousScrollTop=scrollTop};o.onScroll(o);$(document).on('scroll.'+o.options.namespace,function(o){return function(){o.onScroll(o)}}(o));$(window).on('resize.'+o.options.namespace,function(o){return function(){o.stickySidebar.css({'position':'static'});o.onScroll(o)}}(o));if(typeof ResizeSensor!=='undefined'){new ResizeSensor(o.stickySidebar[0],function(o){return function(){o.onScroll(o)}}(o))}function resetSidebar(){o.fixedScrollTop=0;o.sidebar.css({'min-height':'1px'});o.stickySidebar.css({'position':'static','width':'','transform':'none'})}function getClearedHeight(e){var height=e.height();e.children().each(function(){height=Math.max(height,$(this).height())});return height}})}function getWidthForObject(object){var width;try{width=object[0].getBoundingClientRect().width}catch(err){}if(typeof width==="undefined"){width=object.width()}return width}return this}})(jQuery);
}

/*! Shortcode.js by @nicinabox | v1.1.0 - https://github.com/nicinabox/shortcode.js */
var Shortcode=function(el,tags){if(!el){return}this.el=el;this.tags=tags;this.matches=[];this.regex='\\[{name}(\\s[\\s\\S]*?)?\\]'+'(?:((?!\\s*?(?:\\[{name}|\\[\\/(?!{name})))[\\s\\S]*?)'+'(\\[\/{name}\\]))?';if(this.el.jquery){this.el=this.el[0]}this.matchTags();this.convertMatchesToNodes();this.replaceNodes()};Shortcode.prototype.matchTags=function(){var html=this.el.outerHTML,instances,match,re,contents,regex,tag,options;for(var key in this.tags){if(!this.tags.hasOwnProperty(key)){return}re=this.template(this.regex,{name:key});instances=html.match(new RegExp(re,'g'))||[];for(var i=0,len=instances.length;i<len;i++){match=instances[i].match(new RegExp(re));contents=match[3]?'':undefined;tag=match[0];regex=this.escapeTagRegExp(tag);options=this.parseOptions(match[1]);if(match[2]){contents=match[2].trim();tag=tag.replace(contents,'').replace(/\n\s*/g,'');regex=this.escapeTagRegExp(tag).replace('\\]\\[','\\]([\\s\\S]*?)\\[')}this.matches.push({name:key,tag:tag,regex:regex,options:options,contents:contents})}}};Shortcode.prototype.convertMatchesToNodes=function(){var html=this.el.innerHTML,excludes,re,replacer;replacer=function(match,p1,p2,p3,p4,offset,string){if(p1){return match}else{var node=document.createElement('span');node.setAttribute('data-sc-tag',this.tag);node.className='templateify-sc-node templateify-sc-node-'+this.name;return node.outerHTML}};for(var i=0,len=this.matches.length;i<len;i++){excludes='((data-sc-tag=")|(<pre.*)|(<code.*))?';re=new RegExp(excludes+this.matches[i].regex,'g');html=html.replace(re,replacer.bind(this.matches[i]))}this.el.innerHTML=html};Shortcode.prototype.replaceNodes=function(){var self=this,html,match,result,done,node,fn,replacer,nodes=this.el.querySelectorAll('.templateify-sc-node');replacer=function(result){if(result.jquery){result=result[0]}result=self.parseCallbackResult(result);node.parentNode.replaceChild(result,node)};for(var i=0,len=this.matches.length;i<len;i++){match=this.matches[i];node=this.el.querySelector('.templateify-sc-node-'+match.name);if(node&&node.dataset.scTag===match.tag){fn=this.tags[match.name].bind(match);done=replacer.bind(match);result=fn(done);if(result!==undefined){done(result)}}}};Shortcode.prototype.parseCallbackResult=function(result){var container,fragment,children;switch(typeof result){case'function':result=document.createTextNode(result());break;case'string':container=document.createElement('div');fragment=document.createDocumentFragment();container.innerHTML=result;children=container.childNodes;if(children.length){for(var i=0,len=children.length;i<len;i++){fragment.appendChild(children[i].cloneNode(true))}result=fragment}else{result=document.createTextNode(result)}break;case'object':if(!result.nodeType){result=JSON.stringify(result);result=document.createTextNode(result)}break;case'default':break}return result};Shortcode.prototype.parseOptions=function(stringOptions){var options={},set;if(!stringOptions){return}set=stringOptions.replace(/(\w+=)/g,'\n$1').split('\n');set.shift();for(var i=0;i<set.length;i++){var kv=set[i].split('=');options[kv[0]]=kv[1].replace(/\'|\"/g,'').trim()}return options};Shortcode.prototype.escapeTagRegExp=function(regex){return regex.replace(/[\[\]\/]/g,'\\$&')};Shortcode.prototype.template=function(s,d){for(var p in d){s=s.replace(new RegExp('{'+p+'}','g'),d[p])}return s};String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,'')};if(window.jQuery){var pluginName='shortcode';$.fn[pluginName]=function(tags){this.each(function(){if(!$.data(this,pluginName)){$.data(this,pluginName,new Shortcode(this,tags))}});return this}}

/*! MenuIfy by Templateify | v1.0.0 */
!function(a){a.fn.menuify=function(){return this.each(function(){var $t=a(this),b=$t.find('.LinkList ul > li').children('a'),c=b.length;for(var i=0;i<c;i++){var d=b.eq(i),h=d.text();if(h.charAt(0)!=='_'){var e=b.eq(i+1),j=e.text();if(j.charAt(0)==='_'){var m=d.parent();m.append('<ul class="sub-menu m-sub"/>');}}if(h.charAt(0)==='_'){d.text(h.replace('_',''));d.parent().appendTo(m.children('.sub-menu'));}}for(var i=0;i<c;i++){var f=b.eq(i),k=f.text();if(k.charAt(0)!=='_'){var g=b.eq(i+1),l=g.text();if(l.charAt(0)==='_'){var n=f.parent();n.append('<ul class="sub-menu2 m-sub"/>');}}if(k.charAt(0)==='_'){f.text(k.replace('_',''));f.parent().appendTo(n.children('.sub-menu2'));}}$t.find('.LinkList ul li ul').parent('li').addClass('has-sub');});}}(jQuery);

/*! Tabify by Templateify | v1.0.0 */
!function(a){a.fn.tabify=function(b){b=jQuery.extend({onHover:false,animated:true,transition:'fadeInUp'},b);return this.each(function(){var e=a(this),c=e.children('[tab-ify]'),d=0,n='tab-animated',k='tab-active';if(b.onHover==true){var event='mouseenter'}else{var event='click'}e.prepend('<ul class="select-tab"></ul>');c.each(function(){if(b.animated==true){a(this).addClass(n)}e.find('.select-tab').append('<li><a href="javascript:;">'+a(this).attr('tab-ify')+'</a></li>')}).eq(d).addClass(k).addClass('tab-'+b.transition);e.find('.select-tab a').on(event,function(){var f=a(this).parent().index();a(this).closest('.select-tab').find('.active').removeClass('active');a(this).parent().addClass('active');c.removeClass(k).removeClass('tab-'+b.transition).eq(f).addClass(k).addClass('tab-'+b.transition);return false}).eq(d).parent().addClass('active')})}}(jQuery);

! function(a) {
    a.fn.lazyify = function() {
        return this.each(function() {
            var t = a(this),
                dImg = t.attr('data-image'),
                iWid = Math.round(t.width() * 1.3),
                iHei = Math.round(t.height() * 1.3),
                iSiz = '/w' + iWid + '-h' + iHei + '-p-k-no-nu',
                img = '';
            if (dImg.match('s72-c')) {
                img = dImg.replace('/s72-c', iSiz)
            } else if (dImg.match('w72-h')) {
                img = dImg.replace('/w72-h72-p-k-no-nu', iSiz)
            } else {
                img = dImg
            }
            a(window).on('resize scroll', lazyOnScroll);

            function lazyOnScroll() {
                var wHeight = a(window).height(),
                    scrTop = a(window).scrollTop(),
                    offTop = t.offset().top;
                if (scrTop + wHeight > offTop) {
                    var n = new Image();
                    n.onload = function() {
                        t.attr('style', 'background-image:url(' + this.src + ')').addClass('lazy-ify')
                    }, n.src = img
                }
            }
            lazyOnScroll()
        })
    }
}(jQuery);
$('#startinhitnews-main-menu').menuify();
$('#startinhitnews-main-menu .widget').addClass('show-menu');
$(".show-search").click(function() {
    $(this), $("#search-form").toggleClass("show")
});
$('.blog-posts-headline,.related-title').each(function() {
    var $t = $(this),
        $m = $t.find('.more'),
        $mT = showMoreText;
    if ($mT != '') {
        $m.text($mT)
    }
});
$('.follow-by-email-text').each(function() {
    var $t = $(this),
        $fbet = followByEmailText;
    if ($fbet != '') {
        $t.text($fbet)
    }
});
if (data.view.isPost == 'true') {
    $('#post-body').shortcode({
        ads: function() {
            if (this.options != undefined) {
                var i = this.options.id;
                switch (i) {
                    case 'ads1':
                        return '<div id="new-before-ad"/>';
                        break;
                    case 'ads2':
                        return '<div id="new-after-ad"/>';
                        break;
                    default:
                        return '';
                        break
                }
            }
        }
    });
    $('#new-before-ad').each(function() {
        var $t = $(this);
        if ($t.length) {
            $('#before-ad').appendTo($t)
        }
    });
    $('#new-after-ad').each(function() {
        var $t = $(this);
        if ($t.length) {
            $('#after-ad').appendTo($t)
        }
    });
    $('#main-before-ad .widget').each(function() {
        var $t = $(this);
        if ($t.length) {
            $t.appendTo($('#before-ad'))
        }
    });
    $('#main-after-ad .widget').each(function() {
        var $t = $(this);
        if ($t.length) {
            $t.appendTo($('#after-ad'))
        }
    });
}
$('#social-counter ul.social-icons li a').each(function() {
    var $t = $(this),
        $a = $t.find('.count'),
        $d = $t.data('content').trim(),
        $s = $d.split('$'),
        $u = $s[0],
        $c = $s[1];
    $t.attr('href', $u);
    $a.text($c)
});
if (media >= 440) {
    $('#sidebar-tabs').each(function() {
        $('#sidebar-tabs .widget').each(function() {
            var textTab = $(this).find('.widget-title > h3').text().trim();
            $(this).attr('tab-ify', textTab)
        });
        $('#sidebar-tabs').tabify();
        var wCount = $('#sidebar-tabs .widget').length;
        if (wCount >= 1) {
            $(this).addClass('tabs-' + wCount).show()
        }
    });
}
if (data.view.isSingleItem == 'true') {
    $('.avatar-image-container img').attr('src', function($this, i) {
        i = i.replace('//resources.blogblog.com/img/blank.gif', '//1.bp.blogspot.com/-oSjP8F09qxo/Wy1J9dp7b0I/AAAAAAAACF0/ggcRfLCFQ9s2SSaeL9BFSE2wyTYzQaTyQCK4BGAYYCw/s72-r/avatar.jpg');
        i = i.replace('//img1.blogblog.com/img/blank.gif', '//1.bp.blogspot.com/-oSjP8F09qxo/Wy1J9dp7b0I/AAAAAAAACF0/ggcRfLCFQ9s2SSaeL9BFSE2wyTYzQaTyQCK4BGAYYCw/s72-r/avatar.jpg');
        return i
    });
    $('.post-body a').each(function() {
        var $this = $(this),
            type = $this.text().trim(),
            sp = type.split('/'),
            txt = sp[0],
            ico = sp[1],
            color = sp.pop();
        if (type.match('button')) {
            $this.addClass('button').text(txt);
            if (ico != 'button') {
                $this.addClass(ico)
            }
            if (color != 'button') {
                $this.addClass('colored-button').css({
                    'background': color
                })
            }
        }
    });
    $('.post-body blockquote').each(function() {
        var $this = $(this),
            type = $this.text().trim(),
            html = $this.html();
        if (type.match('code-css')) {
            $this.replaceWith('<pre class="css short-b">' + html + '</pre>')
        }
        if (type.match('code-js')) {
            $this.replaceWith('<pre class="javascript short-b">' + html + '</pre>')
        }
        if (type.match('code-xml')) {
            $this.replaceWith('<pre class="xml short-b">' + html + '</pre>')
        }
        var $sb = $('.post-body .short-b').find('b');
        $sb.each(function() {
            var $b = $(this),
                $t = $b.text().trim();
            if ($t.match('code-css') || $t.match('code-js') || $t.match('code-xml')) {
                $b.replaceWith("")
            }
        })
    });
    $('.post-body strike').each(function() {
        var $this = $(this),
            type = $this.text().trim(),
            html = $this.html();
        if (type.match('contact-form')) {
            $this.replaceWith('<div class="contact-form"/>');
            $('.contact-form').append($('#ContactForm1'))
        }
        if (type.match('alert-success')) {
            $this.replaceWith('<div class="alert-message alert-success short-b">' + html + '</div>')
        }
        if (type.match('alert-info')) {
            $this.replaceWith('<div class="alert-message alert-info short-b">' + html + '</div>')
        }
        if (type.match('alert-warning')) {
            $this.replaceWith('<div class="alert-message alert-warning short-b">' + html + '</div>')
        }
        if (type.match('alert-danger')) {
            $this.replaceWith('<div class="alert-message alert-danger short-b">' + html + '</div>')
        }
        if (type.match('callout-success')) {
            $this.replaceWith('<div class="callout callout-success short-b">' + html + '</div>')
        }
        if (type.match('callout-info')) {
            $this.replaceWith('<div class="callout callout-info short-b">' + html + '</div>')
        }
        if (type.match('callout-warning')) {
            $this.replaceWith('<div class="callout callout-warning short-b">' + html + '</div>')
        }
        if (type.match('callout-danger')) {
            $this.replaceWith('<div class="callout callout-danger short-b">' + html + '</div>')
        }
        if (type.match('left-sidebar')) {
            $this.replaceWith('<style>.item #main-wrapper{float:right}.item #sidebar-wrapper{float:left}</style>')
        }
        if (type.match('right-sidebar')) {
            $this.replaceWith('<style>.item #main-wrapper{float:left}.item #sidebar-wrapper{float:right}</style>')
        }
        if (type.match('full-width')) {
            $this.replaceWith('<style>.item #main-wrapper{width:100%}.item #sidebar-wrapper{display:none}</style>')
        }
        var $sb = $('.post-body .short-b').find('b');
        $sb.each(function() {
            var $b = $(this),
                $t = $b.text().trim();
            if ($t.match('alert-success') || $t.match('alert-info') || $t.match('alert-warning') || $t.match('alert-danger') || $t.match('callout-success') || $t.match('callout-info') || $t.match('callout-warning') || $t.match('callout-danger')) {
                $b.replaceWith("")
            }
        })
    });
    $('.about-author .author-description span a').each(function() {
        var $this = $(this),
            cls = $this.text().trim(),
            url = $this.attr('href');
        $this.replaceWith('<li class="' + cls + '"><a href="' + url + '" title="' + cls + '" target="_blank"/></li>');
        $('.author-description').append($('.author-description span li'));
        $('.author-description').addClass('show-icons')
    });
}
$('.footer-widgets-wrap').each(function() {
    var $t = $(this),
        $n = $t.find('.no-items').length;
    if ($n == 3) {
        $('#footer-wrapper').addClass('compact-footer')
    }
});
if (media >= 880) {
    $('#startinhitnews-main-menu li').each(function() {
        var lc = $(this),
            ltx = lc.find('a'),
            am = ltx.attr('href'),
            st = am.toLowerCase(),
            $this = lc,
            li = $this,
            text = st;
        if (st.match('getmega')) {
            $this.addClass('has-sub mega-menu').append('<div class="getMega">' + am + '</div>')
        }
        $this.find('.getMega').shortcode({
            getMega: function() {
                var label = this.options.label,
                    type = this.options.type,
                    num = 5;
                ajaxMega($this, type, num, label, text);
                if (type == 'mtabs') {
                    if (label != undefined) {
                        label = label.split('/')
                    }
                    megaTabs(li, type, label)
                }
            }
        })
    });

    function megaTabs(li, type, label) {
        if (type == 'mtabs') {
            if (label != undefined) {
                var lLen = label.length,
                    code = '<ul class="complex-tabs">';
                for (var i = 0; i < lLen; i++) {
                    var tag = label[i];
                    if (tag) {
                        code += '<div class="mega-tab" tab-ify="' + tag + '"/>'
                    }
                }
                code += '</ul>';
                li.addClass('mega-tabs mtabs').append(code);
                li.find('a:first').attr('href', 'javascript:;');
                $('.mega-tab').each(function() {
                    var $this = $(this),
                        label = $this.attr('tab-ify');
                    ajaxMega($this, 'megatabs', 4, label, 'getmega')
                });
                li.find('ul.complex-tabs').tabify({
                    onHover: true
                })
            } else {
                li.addClass('mega-tabs').append('<ul class="mega-widget">' + msgError() + '</ul>')
            }
        }
    }
}
if (media >= 680 && data.view.isHomepage == 'true') {
  loadJS('owl.carousel')
    $('#breaking-sec .HTML .widget-content').each(function() {
        var $this = $(this),
            text = $this.text().trim().toLowerCase();
        $this.shortcode({
            getBreaking: function() {
                var num = this.options.results,
                    label = this.options.label;
                ajaxBreaking($this, 'breaking', num, label, text)
            }
        })
    });
}
if (data.view.isHomepage == 'true') {
    $('#featured-sec .HTML .widget-content').each(function() {
        var $this = $(this),
            text = $this.text().trim().toLowerCase();
        $this.shortcode({
            getFeatured: function() {
                var label = this.options.label,
                    type = this.options.type;
                switch (type) {
                    case 'featured1':
                        var num = 4;
                        break;
                    case 'featured3':
                        num = 6;
                        break;
                    case 'featured6':
                        num = 3;
                        break;
                    default:
                        num = 5;
                        break
                }
                ajaxFeatured($this, type, num, label, text)
            }
        })
    });
    $('.block-posts .HTML .widget-content').each(function() {
        var $this = $(this),
            text = $this.text().trim().toLowerCase();
        $this.shortcode({
            getBlock: function() {
                var num = this.options.results,
                    label = this.options.label,
                    type = this.options.type;
                ajaxBlock($this, type, num, label, text)
            }
        })
    });
}
  $('.startinhitnews-widget-ready .HTML .widget-content').each(function() {
    var $this = $(this),
        text = $this.text().trim().toLowerCase();
    $this.shortcode({
      getWidget: function() {
        var num = this.options.results,
            label = this.options.label,
            type = this.options.type;
        ajaxWidget($this, type, num, label, text)
      }
    })
  });
  $('.startinhitnews-related-content').each(function() {
    var $this = $(this),
        label = $this.find('.related-tag').attr('data-label'),
        num = relatedPostsNum;
    if (num >= 6) {
      num = 6
    } else {
      num = 3
    }
    ajaxRelated($this, 'related', num, label, 'getrelated')
  });

function msgError() {
    return '<span class="no-posts"><b>Error:</b> No Results Found</span>'
}

function msgServerError() {
    return '<div class="no-posts error-503"><b>Failed to load resource:</b> the server responded with a status of 503</div>'
}

function beforeLoader() {
    return '<div class="loader"/>'
}

function getFeedUrl(type, num, label) {
    var furl = '';
    switch (label) {
        case 'recent':
            furl = '/feeds/posts/summary?alt=json&max-results=' + num;
            break;
        case 'comments':
            if (type == 'list') {
                furl = '/feeds/comments/summary?alt=json&max-results=' + num
            } else {
                furl = '/feeds/posts/summary/-/' + label + '?alt=json&max-results=' + num
            }
            break;
        default:
            furl = '/feeds/posts/summary/-/' + label + '?alt=json&max-results=' + num;
            break
    }
    return furl
}

function getPostLink(feed, i) {
    for (var x = 0; x < feed[i].link.length; x++)
        if (feed[i].link[x].rel == 'alternate') {
            var link = feed[i].link[x].href;
            break
        } return link
}

function getPostTitle(feed, i) {
    var n = feed[i].title.$t;
    return n
}

function getPostImage(feed, i) {
    if ('media$thumbnail' in feed[i]) {
        var src = feed[i].media$thumbnail.url;
        if (src.match('img.youtube.com')) {
            src = src.replace('/default.', '/0.')
        }
        var img = src
    } else {
        img = 'https://4.bp.blogspot.com/-eALXtf-Ljts/WrQYAbzcPUI/AAAAAAAABjY/vptx-N2H46oFbiCqbSe2JgVSlHhyl0MwQCK4BGAYYCw/s72-c/nth-ify.png'
    }
    return img
}

function getPostAuthor(feed, i) {
    var n = feed[i].author[0].name.$t,
        by = messages.postedBy,
        em = '';
    if (by != '') {
        em = '<em>' + by + '</em>'
    } else {
        em = ''
    }
    var code = '<span class="entry-author">' + em + '<span class="by">' + n + '</span></span>';
    return code
}

function getPostDate(feed, i) {
    var c = feed[i].published.$t,
        d = c.substring(0, 4),
        f = c.substring(5, 7),
        m = c.substring(8, 10),
        h = monthFormat[parseInt(f, 10) - 1] + ' ' + m + ', ' + d;
    var on = messages.postedOn,
        em = '';
    if (on != '') {
        em = '<em>' + on + '</em>'
    } else {
        em = ''
    }
    var code = ['<span class="entry-time">' + em + '<time class="published" datetime="' + c + '">' + h + '</time></span>', '<span class="entry-time"><time class="published" datetime="' + c + '">' + h + '</time></span>'];
    return code
}

function getPostLabel(feed, i) {
    if (feed[i].category != undefined) {
        var tag = feed[i].category[0].term,
            code = '<span class="entry-category">' + tag + '</span>'
    } else {
        code = ''
    }
    return code
}

function getPostSnippet(feed, i) {
    var n = feed[i].summary.$t,
        u = $('<div>').html(n),
        c = u.text().trim().substr(0, 150),
        code = '<div class="entry-snippet">' + c + '\u2026</div>';
    return code
}

function getNumberComments(feed, i) {
    if ('thr$total' in feed[i]) {
        var u = feed[i].thr$total.$t,
            code = '<div class="number-comments">' + u + '</div>';
    }
    return code
}

function getPostComments(feed, i, link) {
    var n = feed[i].author[0].name.$t,
        e = feed[i].author[0].gd$image.src.replace('/s113', '/w72-h72-p-k-no-nu'),
        h = feed[i].title.$t;
    if (e.match('//img1.blogblog.com/img/blank.gif')) {
        var img = '//4.bp.blogspot.com/-oSjP8F09qxo/Wy1J9dp7b0I/AAAAAAAACF0/ggcRfLCFQ9s2SSaeL9BFSE2wyTYzQaTyQCK4BGAYYCw/w72-h72-p-k-no-nu/avatar.jpg'
    } else {
        var img = e
    }
    var code = '<article class="custom-item item-' + i + '"><a class="entry-image-link cmm-avatar" href="' + link + '"><span class="entry-thumb" data-image="' + img + '"/></a><h2 class="entry-title"><a href="' + link + '">' + n + '</a></h2><span class="cmm-snippet excerpt">' + h + '</span></article>';
    return code
}

function getFeatMeta(type, i, author, date) {
    var code = '<div class="entry-meta">' + date[1] + '</div>';
    switch (type) {
        case 'featured1':
        case 'featured2':
        case 'featured3':
        case 'featured4':
        case 'featured5':
        case 'featured6':
            switch (i) {
                case 0:
                    switch (type) {
                        case 'featured1':
                        case 'featured2':
                        case 'featured4':
                            code = '<div class="entry-meta">' + author + date[0] + '</div>';
                            break
                    }
                    break;
                case 1:
                    switch (type) {
                        case 'featured4':
                            code = '<div class="entry-meta">' + author + date[0] + '</div>';
                            break
                    }
                    break
            }
            break
    }
    return code
}

function getAjax($this, type, num, label) {
    switch (type) {
        case 'msimple':
        case 'megatabs':
        case 'breaking':
        case 'featured1':
        case 'featured2':
        case 'featured3':
        case 'featured4':
        case 'featured5':
        case 'featured6':
        case 'block1':
        case 'block2':
        case 'col-left':
        case 'col-right':
        case 'grid1':
        case 'grid2':
        case 'carousel':
        case 'videos':
        case 'list':
        case 'related':
            if (label == undefined) {
                label = 'geterror404'
            }
            var furl = getFeedUrl(type, num, label);
            $.ajax({
                url: furl,
                type: 'GET',
                dataType: 'json',
                cache: true,
                beforeSend: function(data) {
                    switch (type) {
                        case 'featured1':
                        case 'featured2':
                        case 'featured3':
                        case 'featured4':
                        case 'featured5':
                        case 'featured6':
                            $this.html(beforeLoader()).parent().addClass('show-ify show-' + type + '');
                            break;
                        case 'block1':
                        case 'block2':
                        case 'grid1':
                        case 'grid2':
                        case 'videos':
                        case 'carousel':
                        case 'related':
                            $this.html(beforeLoader()).parent().addClass('show-ify');
                            break;
                        case 'col-left':
                            $this.html(beforeLoader()).parent().addClass('column-left block-column show-ify');
                            break;
                        case 'col-right':
                            $this.html(beforeLoader()).parent().addClass('column-right block-column show-ify');
                            break;
                        case 'list':
                            $this.html(beforeLoader());
                            break
                    }
                },
                success: function(data) {
                    var html = '';
                    switch (type) {
                        case 'msimple':
                        case 'megatabs':
                            html = '<ul class="mega-widget">';
                            break;
                        case 'breaking':
                            html = '<div class="breaking-news">';
                            break;
                        case 'featured1':
                        case 'featured2':
                        case 'featured3':
                        case 'featured4':
                        case 'featured5':
                        case 'featured6':
                            html = '<div class="featured-grid ' + type + '">';
                            break;
                        case 'block1':
                            html = '<div class="block-posts-1">';
                            break;
                        case 'block2':
                            html = '<div class="block-posts-2 total-' + num + '">';
                            break;
                        case 'col-left':
                        case 'col-right':
                            html = '<div class="column-posts">';
                            break;
                        case 'grid1':
                            html = '<div class="grid-posts-1 total-' + num + '">';
                            break;
                        case 'grid2':
                            html = '<div class="grid-posts-2">';
                            break;
                        case 'carousel':
                            html = '<div class="block-carousel">';
                            break;
                        case 'videos':
                            html = '<div class="block-videos total-' + num + '">';
                            break;
                        case 'list':
                            html = '<div class="custom-widget">';
                            break;
                        case 'related':
                            html = '<div class="related-posts total-' + num + '">';
                            break
                    }
                    var entry = data.feed.entry;
                    if (entry != undefined) {
                        for (var i = 0, feed = entry; i < feed.length; i++) {
                            var link = getPostLink(feed, i),
                                title = getPostTitle(feed, i, link),
                                image = getPostImage(feed, i, link),
                                author = getPostAuthor(feed, i),
                                date = getPostDate(feed, i),
                                tag = getPostLabel(feed, i),
                                snippet = getPostSnippet(feed, i),
                                comments = getNumberComments(feed, i),
                                feat_meta = getFeatMeta(type, i, author, date);
                            var content = '';
                            switch (type) {
                                case 'msimple':
                                case 'megatabs':
                                    content += '<article class="mega-item"><div class="mega-content"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></div></article>';
                                    break;
                                case 'breaking':
                                    content += '<article class="breaking-item"><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2></article>';
                                    break;
                                case 'featured1':
                                case 'featured2':
                                case 'featured3':
                                case 'featured4':
                                case 'featured5':
                                case 'featured6':
                                    switch (i) {
                                        case 0:
                                            content += '<article class="featured-item item-' + i + '"><div class="featured-item-inner"><a class="entry-image-link before-mask" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a><div class="entry-info">' + tag + '<h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2>' + feat_meta + '</div></div></article><div class="featured-scroll">';
                                            break;
                                        default:
                                            content += '<article class="featured-item item-' + i + '"><div class="featured-item-inner"><a class="entry-image-link before-mask" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a><div class="entry-info">' + tag + '<h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2>' + feat_meta + '</div></div></article>';
                                            break
                                    }
                                    break;
                                case 'block1':
                                    switch (i) {
                                        case 0:
                                            content += '<article class="block-item item-' + i + '"><div class="block-inner"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a>' + tag + '</div><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + author + date[0] + comments + '</div>' + snippet + '</article>';
                                            break;
                                        default:
                                            content += '<article class="block-item item-' + i + '"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a><div class="entry-header"><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></div></article>';
                                            break
                                    }
                                    break;
                                case 'block2':
                                    switch (i) {
                                        case 0:
                                            content += '<article class="block-item item-' + i + '"><div class="block-inner"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a><div class="entry-info">' + tag + '<h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + author + date[0] + '</div></div></div></article><div class="block-grid">';
                                            break;
                                        default:
                                            content += '<article class="block-item item-' + i + '"><div class="entry-image"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a></div><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></article>';
                                            break
                                    }
                                    break;
                                case 'col-left':
                                case 'col-right':
                                    switch (i) {
                                        case 0:
                                            content += '<article class="column-item item-' + i + '"><div class="column-inner"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a>' + tag + '</div><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + author + date[0] + comments + '</div>' + snippet + '</article>';
                                            break;
                                        default:
                                            content += '<article class="column-item item-' + i + '"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a><div class="entry-header"><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></div></article>';
                                            break
                                    }
                                    break;
                                case 'grid1':
                                    content += '<article class="grid-item item-' + i + '"><div class="entry-image"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a></div><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></article>';
                                    break;
                                case 'grid2':
                                    content += '<article class="grid-item item-' + i + '"><div class="entry-image"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a>' + tag + '</div><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + author + date[0] + comments + '</div>' + snippet + '</article>';
                                    break;
                                case 'carousel':
                                    content += '<article class="carousel-item item-' + i + '"><div class="entry-image"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a></div><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></article>';
                                    break;
                                case 'videos':
                                    content += '<article class="videos-item item-' + i + '"><div class="entry-image"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/><span class="video-icon"/></a></div><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></article>';
                                    break;
                                case 'list':
                                    switch (label) {
                                        case 'comments':
                                            var code = getPostComments(feed, i, link);
                                            content += code;
                                            break;
                                        default:
                                            content += '<article class="custom-item item-' + i + '"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a><div class="entry-header"><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></div></article>';
                                            break
                                    }
                                    break;
                                case 'related':
                                    content += '<article class="related-item item-' + i + '"><div class="related-item-inner"><div class="entry-image"><a class="entry-image-link" href="' + link + '"><span class="entry-thumb" data-image="' + image + '"/></a></div><h2 class="entry-title"><a href="' + link + '">' + title + '</a></h2><div class="entry-meta">' + date[1] + '</div></div></article>';
                                    break
                            }
                            html += content
                        }
                    } else {
                        switch (type) {
                            case 'msimple':
                            case 'megatabs':
                                html = '<ul class="mega-widget">' + msgError() + '</ul>';
                                break;
                            default:
                                html = msgError();
                                break
                        }
                    }
                    switch (type) {
                        case 'msimple':
                            html += '</ul>';
                            $this.append(html).addClass('msimple');
                            $this.find('a:first').attr('href', function($this, href) {
                                switch (label) {
                                    case 'recent':
                                        href = href.replace(href, '/search');
                                        break;
                                    default:
                                        href = href.replace(href, '/search/label/' + label);
                                        break
                                }
                                return href
                            });
                            break;
                        case 'breaking':
                            html += '</div></ul>';
                            $this.html(html).parent().addClass('show-ify');
                            var $slider = $this.find('.breaking-news, .entry-thumb');
                            $slider.owlCarousel({
                                items: 1,
                                animateOut: 'fadeOutRight',
                                animateIn: 'fadeInRight',
                                smartSpeed: 0,
                                nav: true,
                                navText: ['', ''],
                                loop: true,
                                autoplay: true,
                                autoplayTimeout: 3000,
                                autoplayHoverPause: true,
                                dots: false,
                                mouseDrag: false,
                                touchDrag: false,
                                freeDrag: false,
                                pullDrag: false
                            });
                            break;
                        case 'featured1':
                        case 'featured2':
                        case 'featured3':
                        case 'featured4':
                        case 'featured5':
                        case 'featured6':
                            html += '</div></div>';
                            $this.html(html);
                            break;
                        case 'block1':
                        case 'grid1':
                        case 'grid2':
                        case 'col-left':
                        case 'col-right':
                        case 'videos':
                            html += '</div>';
                            $this.html(html);
                            break;
                        case 'block2':
                            html += '</div></div>';
                            $this.html(html);
                            break;
                        case 'carousel':
                            html += '</div>';
                            $this.html(html);
                            var $slider = $this.find('.block-carousel');
                            $slider.owlCarousel({
                                items: 3,
                                slideBy: 3,
                                margin: 20,
                                smartSpeed: 150,
                                nav: true,
                                navText: ['', ''],
                                loop: true,
                                autoHeight: true,
                                autoplay: false,
                                dots: false,
                                responsive: {
                                    0: {
                                        items: 1
                                    },
                                    541: {
                                        items: 2
                                    },
                                    681: {
                                        items: 3
                                    }
                                }
                            });
                            break;
                        default:
                            html += '</div>';
                            $this.html(html);
                            break
                    }
                    $this.find('span.entry-thumb').lazyify()
                },
                error: function() {
                    switch (type) {
                        case 'msimple':
                            $this.append('<ul>' + msgServerError() + '</ul>');
                            break;
                        case 'breaking':
                            $this.html(msgServerError()).parent().addClass('show-ify');
                            break;
                        default:
                            $this.html(msgServerError());
                            break
                    }
                }
            })
    }
}

function ajaxMega($this, type, num, label, text) {
    if (text.match('getmega')) {
        if (type == 'msimple' || type == 'megatabs' || type == 'mtabs') {
            return getAjax($this, type, num, label)
        } else {
            $this.addClass('has-sub mega-menu').append('<ul class="mega-widget">' + msgError() + '</ul>')
        }
    }
}

function ajaxBreaking($this, type, num, label, text) {
    if (text.match('getbreaking')) {
        if (type == 'breaking') {
            return getAjax($this, type, num, label)
        } else {
            $this.html(msgError()).parent().addClass('show-ify')
        }
    }
}

function ajaxFeatured($this, type, num, label, text) {
    if (text.match('getfeatured')) {
        if (type == 'featured1' || type == 'featured2' || type == 'featured3' || type == 'featured4' || type == 'featured5' || type == 'featured6') {
            return getAjax($this, type, num, label)
        } else {
            $this.html(beforeLoader()).parent().addClass('show-ify');
            setTimeout(function() {
                $this.html(msgError())
            }, 500)
        }
    }
}

function ajaxBlock($this, type, num, label, text) {
    if (text.match('getblock')) {
        if (type == 'block1' || type == 'block2' || type == 'col-left' || type == 'col-right' || type == 'grid1' || type == 'grid2' || type == 'carousel' || type == 'videos') {
            var moreText = showMoreText,
                text = '';
            if (moreText != '') {
                text = moreText
            } else {
                text = messages.showMore
            }
            $this.parent().find('.widget-title').append('<a class="more" href="/search/label/' + label + '">' + text + '</a>');
            return getAjax($this, type, num, label)
        } else {
            $this.html(msgError()).parent().addClass('show-ify')
        }
    }
}

function ajaxWidget($this, type, num, label, text) {
    if (text.match('getwidget')) {
        if (type == 'list') {
            return getAjax($this, type, num, label)
        } else {
            $this.html(msgError())
        }
    }
}

function ajaxRelated($this, type, num, label, text) {
    if (text.match('getrelated')) {
        return getAjax($this, type, num, label)
    }
}
if (data.view.isSingleItem == 'true') {
    $('.comments-title h3.title').each(function() {
        var $t = $(this),
            $tx = $t.text().trim(),
            $c = $t.attr('count').trim(),
            $m = $t.attr('message').trim(),
            $sp = $tx.split('/'),
            $r = '';
        if ($c == 0) {
            $r = $sp[1]
        } else {
            if ($sp[2] == undefined) {
                $r = $sp[0] + ' ' + $m
            } else {
                $r = $sp[0] + ' ' + $sp[2]
            }
        }
        $t.text($r)
    });
    $('.startinhitnews-blog-post-comments').each(function() {
        var $this = $(this),
            system = commentsSystem,
            facebook = '<div class="fb-comments" data-width="100%" data-href="' + disqus_blogger_current_url + '" order_by="time" data-numposts="5"></div>',
            sClass = 'comments-system-' + system;
        switch (system) {
            case 'blogger':
                $this.addClass(sClass).show();
                $('.entry-meta .entry-comments-link').addClass('show');
                break;
            case 'disqus':
                $this.addClass(sClass).show();
                break;
            case 'facebook':
                $this.addClass(sClass).show().find('#comments').replaceWith(facebook);
                break;
            case 'hide':
                $this.hide();
                break;
            default:
                $this.addClass('comments-system-default').show();
                $('.entry-meta .entry-comments-link').addClass('show');
                break
        }
    });
}
$(function() {
    $('.index-post .entry-image-link .entry-thumb, .PopularPosts .entry-image-link .entry-thumb, .FeaturedPost .entry-image-link .entry-thumb,.about-author .author-avatar').lazyify();
    if (data.view.isMobileRequest == 'true') {
        $('.mobile-logo').each(function() {
            var $t = $(this),
                $l = $('#main-logo .header-widget a').clone();
            $l.find('#h1-tag').remove();
            $l.appendTo($t)
        });
        $('#mobile-menu').each(function() {
            var $t = $(this),
                $m = $('#startinhitnews-main-menu-nav').clone();
            $m.attr('id', 'main-mobile-nav');
            $m.find('.getMega, .mega-widget, .mega-tab').remove();
            $m.find('li.mega-tabs .complex-tabs').each(function() {
                var $eq = $(this);
                $eq.replaceWith($eq.find('> ul.select-tab').attr('class', 'sub-menu m-sub'))
            });
            $m.find('.mega-menu > a').each(function() {
                var $a = $(this),
                    $h = $a.attr('href').trim().toLowerCase();
                if ($h.match('getmega')) {
                    $a.attr('href', '/search')
                }
            });
            $m.find('.mega-tabs ul li > a').each(function() {
                var $a = $(this),
                    $l = $a.text().trim();
                $a.attr('href', '/search/label/' + $l)
            });
            $m.appendTo($t);
            $('.show-mobile-menu, .hide-mobile-menu, .overlay').on('click', function() {
                $('body').toggleClass('nav-active')
            });
            $('.mobile-menu .has-sub').append('<div class="submenu-toggle"/>');
            $('.mobile-menu .mega-menu').find('.submenu-toggle').remove();
            $('.mobile-menu .mega-tabs').append('<div class="submenu-toggle"/>');
            $('.mobile-menu ul li .submenu-toggle').on('click', function($this) {
                if ($(this).parent().hasClass('has-sub')) {
                    $this.preventDefault();
                    if (!$(this).parent().hasClass('show')) {
                        $(this).parent().addClass('show').children('.m-sub').slideToggle(170)
                    } else {
                        $(this).parent().removeClass('show').find('> .m-sub').slideToggle(170)
                    }
                }
            })
        });
        $('.social-mobile').each(function() {
            var $t = $(this),
                $l = $('#about-section .social-footer').clone();
            $l.removeClass('social-color');
            $l.appendTo($t)
        });
    }
    $(window).scroll(function() {
        if (fixedMenu == true) {
            if ($(window).scrollTop() >= 190) {
                $('.navbar-wrap .navbar').addClass('scroll');
            } else {
                $('.navbar-wrap .navbar').removeClass('scroll');
            }
        }
    });
    if (media >= 880) {
        $('#main-wrapper, #sidebar-wrapper').each(function() {
            if (fixedSidebar == true) {
                $(this).theiaStickySidebar({
                    additionalMarginTop: 60,
                    additionalMarginBottom: 20
                })
            }
        });
    }
    if (media >= 540) {
        jQuery(document).ready(function() {
                jQuery(window).scroll(function() {
                    220 < jQuery(this).scrollTop() ? jQuery("#scrollToTop").fadeIn(600) : jQuery("#scrollToTop").fadeOut(600)
                })
            }),
            $(function() {
                $(document).ready(function() {
                    $(".gototop").click(function() {
                        var t = $("#top").offset().top;
                        return $("html,body").animate({
                            scrollTop: t
                        }, 1e3)
                    }), $(".gotobottom").click(function() {
                        var t = $("#bottom").offset().top;
                        return $("html,body").animate({
                            scrollTop: t
                        }, 1e3)
                    })
                })
            });
    }
    if (data.view.isHomepage == 'true') {
        $('#load-more-link').each(function() {
            var $this = $(this),
                $loadLink = $this.data('load');
            if ($loadLink) {
                $('#load-more-link').show()
            }
            $('#load-more-link').on('click', function(a) {
                $('#load-more-link').hide();
                $.ajax({
                    url: $loadLink,
                    success: function(data) {
                        var $p = $(data).find('.blog-posts');
                        $p.find('.index-post').addClass('post-animated post-fadeInUp');
                        $('.blog-posts').append($p.html());
                        $loadLink = $(data).find('#load-more-link').data('load');
                        if ($loadLink) {
                            $('#load-more-link').show()
                        } else {
                            $('#load-more-link').hide();
                            $('#blog-pager .no-more').addClass('show')
                        }
                        $('.index-post .entry-image-link .entry-thumb').lazyify()
                    },
                    beforeSend: function() {
                        $('#blog-pager .loading').show()
                    },
                    complete: function() {
                        $('#blog-pager .loading').hide()
                    }
                });
                a.preventDefault()
            })
        })
    }
});
if (data.view.isMobileRequest == 'true') {
    // delete ?m=1
    var uri;
    if ((uri = window.location.toString()).indexOf("%3D", "%3D") > 0) {
        var clean_uri = uri.substring(0, uri.indexOf("%3D"));
        window.history.replaceState({}, document.title, clean_uri)
    }
    if ((uri = window.location.toString()).indexOf("%3D%3D", "%3D%3D") > 0) {
        clean_uri = uri.substring(0, uri.indexOf("%3D%3D"));
        window.history.replaceState({}, document.title, clean_uri)
    }
    if ((uri = window.location.toString()).indexOf("&m=1", "&m=1") > 0) {
        clean_uri = uri.substring(0, uri.indexOf("&m=1"));
        window.history.replaceState({}, document.title, clean_uri)
    }
    if ((uri = window.location.toString()).indexOf("?m=1", "?m=1") > 0) {
        clean_uri = uri.substring(0, uri.indexOf("?m=1"));
        window.history.replaceState({}, document.title, clean_uri)
    }
    var protocol = window.location.protocol.replace(/\:/g, "");
    if ("http" == protocol) {
        var url = window.location.href.replace("http", "https");
        window.location.replace(url)
    }
}
// dark mode
function auto(){document.body.classList.add('auto');if(new Date().getHours()>21||new Date().getHours()<6){document.body.classList.add('dark');localStorage.setItem('227519dark','true')}else{document.body.classList.remove('dark');localStorage.setItem('227519dark','false')}}function dark(){localStorage.getItem('227519dark')=='true'?document.body.classList.add('dark'):document.body.classList.remove('dark')}if(localStorage.getItem('227519auto')=='true'){auto()}else{localStorage.getItem('227519dark')==null?auto():dark()}function toggle(){localStorage.setItem('227519auto',localStorage.getItem('227519auto')=='true'?'false':'true');localStorage.getItem('227519auto')=='true'?auto():document.body.classList.remove('auto')}function mode(){document.body.classList.remove('auto');localStorage.removeItem('227519auto');localStorage.setItem('227519dark',localStorage.getItem('227519dark')=='true'?'false':'true');dark()}
if (data.view.isSingleItem == 'true') {
    loadCSS('https://cdnjs.cloudflare.com/ajax/libs/lightgallery/1.6.6/css/lightgallery.min.css', 'css')
    // box category
    var postBody = document.querySelector('.post-body')
    var titleChapter = postBody.querySelectorAll('h2,h3')
    if (1 <= titleChapter.length) {
        var i, leChapteraptor = []
        for (i = 0; i < titleChapter.length; i++) {
            anchorChapter = 'chapter-' + (i + 1)
            titleChapter[i].setAttribute('id', anchorChapter)
            titleChapter[i].setAttribute('title', 'Lên đầu trang')
            leChapteraptor[i] = '<li data-target=' + "#" + anchorChapter + '>' + titleChapter[i].innerHTML + '</li>'
        }
        $('.box_category').html('<p>Nội dung chính <label></label></p><ul class="chapter">' + leChapteraptor.join('') + '</ul>')
    } else {
        $('.box_category').remove()
    }
    $(function() {
        var name_more = $('.post-body a[name=more]')
        if (name_more) {
            $('.box_category').insertAfter(name_more)
        } else {
            $('.box_category').remove()
        }
    })
    $('.box_category p>label').click(function() {
        $(this).toggleClass('show')
        $(this).parent().parent().find('ul').slideToggle('slow')
    })
    $('.box_category li').bind('click', function() {
        var target = $(this).attr('data-target')
        $('html, body').stop().animate({
            scrollTop: ($(target).offset().top) - 70
        }, 'slow')
    })
    for (k = 0; k < titleChapter.length; k++) {
        titleChapter[k].addEventListener('click', function() {
            $('html, body').stop().animate({
                scrollTop: ($('.box_category').position().top)
            }, 'slow')
        })
    }
}
if (data.view.isPost == 'true') {
    $('.post-nav')['each'](function() {
        var getLinkOlderPost = $('a.blog-pager-older-link')['attr']('href'),
            getLinkNewerPost = $('a.blog-pager-newer-link')['attr']('href');
        $['ajax']({
            url: getLinkOlderPost,
            type: 'get',
            success: function(data) {
                var getTitle = $(data)['find']('.blog-post h1.entry-title')['text']();
                $('.post-older a .post-nav-inner p')['text'](getTitle)
            }
        });
        $['ajax']({
            url: getLinkNewerPost,
            type: 'get',
            success: function(data) {
                var getTitle = $(data)['find']('.blog-post h1.entry-title')['text']();
                $('.post-newer a .post-nav-inner p')['text'](getTitle)
            }
        })
    });
    // post views
    $(function() {
        function post_views() {
            jQuery.getScript('https://cdn.firebase.com/js/client/2.3.2/firebase.js').done(function() {
                $.each($(".post-views"), function(i, e) {
                    var elem = $(e).find("#postviews"),
                        rel = $('link[rel="canonical"]').attr("href"),
                        blogStats = new Firebase("https://nguyen-tinh.firebaseio.com/pages/id/" + $(e).attr("data-id"))
                    blogStats.once("value", function(snapshot) {
                        var data = snapshot.val(),
                            isnew = false
                        if (data == null) {
                            data = {}
                            data.value = 0
                            data.url = $(e).attr("data-href")
                            data.id = $(e).attr("data-id")
                            isnew = true
                        }
                        elem.text(data.value)
                        data.value++
                        if (window.location.pathname != "/" && $(e).attr("data-href") == rel) {
                            if (isnew) {
                                blogStats.set(data)
                            } else {
                                blogStats.child("value").set(data.value)
                            }
                        }
                    })
                })
            })
        }
        post_views()
    });
    // lazy load
    (function(a) {
        a.fn.lazyload = function(b) {
            var c = {
                threshold: 0,
                failurelimit: 0,
                event: "scroll",
                effect: "show",
                container: window
            };
            if (b) {
                a.extend(c, b)
            }
            var d = this;
            if ("scroll" == c.event) {
                a(c.container).bind("scroll", function(b) {
                    var e = 0;
                    d.each(function() {
                        if (a.abovethetop(this, c) || a.leftofbegin(this, c)) {} else if (!a.belowthefold(this, c) && !a.rightoffold(this, c)) {
                            a(this).trigger("appear")
                        } else {
                            if (e++ > c.failurelimit) {
                                return false
                            }
                        }
                    });
                    var f = a.grep(d, function(a) {
                        return !a.loaded
                    });
                    d = a(f)
                })
            }
            this.each(function() {
                var b = this;
                if (undefined == a(b).attr("original")) {
                    a(b).attr("original", a(b).attr("src"))
                }
                if ("scroll" != c.event || undefined == a(b).attr("src") || c.placeholder == a(b).attr("src") || a.abovethetop(b, c) || a.leftofbegin(b, c) || a.belowthefold(b, c) || a.rightoffold(b, c)) {
                    if (c.placeholder) {
                        a(b).attr("src", c.placeholder)
                    } else {
                        a(b).removeAttr("src")
                    }
                    b.loaded = false
                } else {
                    b.loaded = true
                }
                a(b).one("appear", function() {
                    if (!this.loaded) {
                        a("<img />").bind("load", function() {
                            a(b).hide().attr("src", a(b).attr("original"))[c.effect](c.effectspeed);
                            b.loaded = true
                        }).attr("src", a(b).attr("original"))
                    }
                });
                if ("scroll" != c.event) {
                    a(b).bind(c.event, function(c) {
                        if (!b.loaded) {
                            a(b).trigger("appear")
                        }
                    })
                }
            });
            a(c.container).trigger(c.event);
            return this
        };
        a.belowthefold = function(b, c) {
            if (c.container === undefined || c.container === window) {
                var d = a(window).height() + a(window).scrollTop()
            } else {
                var d = a(c.container).offset().top + a(c.container).height()
            }
            return d <= a(b).offset().top - c.threshold
        };
        a.rightoffold = function(b, c) {
            if (c.container === undefined || c.container === window) {
                var d = a(window).width() + a(window).scrollLeft()
            } else {
                var d = a(c.container).offset().left + a(c.container).width()
            }
            return d <= a(b).offset().left - c.threshold
        };
        a.abovethetop = function(b, c) {
            if (c.container === undefined || c.container === window) {
                var d = a(window).scrollTop()
            } else {
                var d = a(c.container).offset().top
            }
            return d >= a(b).offset().top + c.threshold + a(b).height()
        };
        a.leftofbegin = function(b, c) {
            if (c.container === undefined || c.container === window) {
                var d = a(window).scrollLeft()
            } else {
                var d = a(c.container).offset().left
            }
            return d >= a(b).offset().left + c.threshold + a(b).width()
        };
        a.extend(a.expr[":"], {
            "below-the-fold": "$.belowthefold(a, {threshold : 0, container: window})",
            "above-the-fold": "!$.belowthefold(a, {threshold : 0, container: window})",
            "right-of-fold": "$.rightoffold(a, {threshold : 0, container: window})",
            "left-of-fold": "!$.rightoffold(a, {threshold : 0, container: window})"
        })
    })(jQuery);
    $(function() {
        $(".separator img,.tr-caption-container img").lazyload({
            placeholder: "//1.bp.blogspot.com/-Qg5bi1ZtDdM/VZ5nHAyYBqI/AAAAAAAAChE/exGnasO4oyk/s640/arlinadesign.gif",
            effect: "fadeIn",
            threshold: "-50"
        })
    });
}
})
